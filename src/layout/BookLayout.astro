---
interface Chapter {
  id: string;
  slug: string;
  data: {
    title: string;
    order: number;
  };
}

interface Article {
  id: string;
  slug: string;
  data: {
    title: string;
    chapterSlug: string;
    order: number;
  };
}

const { chapters, articles, ebook } = Astro.props;

const sortedChapters = chapters.sort((a, b) => a.data.order - b.data.order);

const articlesByChapter = sortedChapters.map(ch => {
  const relatedArticles = articles
    .filter(a => a.data.chapterSlug === ch.slug)
    .sort((a, b) => a.data.order - b.data.order);

  return {
    ...ch,
    articles: relatedArticles,
  };
});

---

<div class="flex h-screen">
  <aside class="w-64 bg-primary h-screen p-4 overflow-y-auto flex-shrink-0 shadow-xl text-white">
    <h2 class="text-lg font-bold mb-4 capitalize text-white">{ebook || 'Libro'}</h2>
    <ul class="space-y-2 text-white">
      {articlesByChapter.map(chapter => (
        <li id={chapter.slug} class="mb-2 text-white">
          <div class="font-semibold text-white"><a
                  href={`/books/${ebook}`}
                  class="text-white hover:underline"
                >
                  {chapter.data.title}
                </a></div>
          <ul class="ml-3 mt-1 space-y-2 text-white">
            {chapter.articles.map(article => (
              <li id={article.slug}>
                <a
                  href={`/books/${ebook}/${article.slug}`}
                  class="text-secondary hover:underline"
                >
                  {article.data.title}
                </a>
              </li>
            ))}
          </ul>
        </li>
      ))}
    </ul>
  </aside>

  <main class="flex-1 p-6 overflow-y-auto h-screen">
    <slot />
  </main>
</div>
